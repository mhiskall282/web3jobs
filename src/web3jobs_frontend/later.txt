 "internet_identity": {
      "candid": "https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity.did",
      "frontend": {},
      "remote": {
        "id": {
          "ic": "rdmx6-jaaaa-aaaaa-aaadq-cai"
        }
      },
      "type": "custom",
      "wasm": "https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity_dev.wasm.gz"
    },


"internet_identity": {
    "type": "pull",
    "id": "rdmx6-jaaaa-aaaaa-aaadq-cai"
},




// src/components/ProfileView.jsx
import React from 'react';

const ProfileView = ({ profile }) => {
  if (!profile) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600">Profile not found.</p>
      </div>
    );
  }
  
  return (
    <div>
      <h1 className="text-2xl font-bold text-gray-800 mb-6">My Profile</h1>
      
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-1">{profile.name}</h2>
          <p className="text-gray-600">{profile.email}</p>
        </div>
        
        <div className="mb-6">
          <h3 className="font-medium text-gray-800 mb-2">Role</h3>
          <p className="text-gray-700">
            {profile.role === "#Freelancer" ? "Freelancer" : "Recruiter"}
          </p>
        </div>
        
        <div className="mb-6">
          <h3 className="font-medium text-gray-800 mb-2">Skills</h3>
          <div className="flex flex-wrap gap-2">
            {profile.skills.map((skill, index) => (
              <span 
                key={index} 
                className={`text-xs px-2 py-1 rounded-full ${
                  profile.role === "#Freelancer" 
                    ? "bg-indigo-100 text-indigo-800" 
                    : "bg-purple-100 text-purple-800"
                }`}
              >
                {skill}
              </span>
            ))}
          </div>
        </div>
        
        <div>
          <h3 className="font-medium text-gray-800 mb-2">Bio</h3>
          <p className="text-gray-700">{profile.bio}</p>
        </div>
      </div>
    </div>
  );
};

export default ProfileView;


// src/components/ProfileView.jsx
import React from 'react';

const ProfileView = ({ profile }) => {
  if (!profile) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600">Profile not found.</p>
      </div>
    );
  }
  
  return (
    <div>
      <h1 className="text-2xl font-bold text-gray-800 mb-6">My Profile</h1>
      
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-1">{profile.name}</h2>
          <p className="text-gray-600">{profile.email}</p>
        </div>
        
        <div className="mb-6">
          <h3 className="font-medium text-gray-800 mb-2">Role</h3>
          <p className="text-gray-700">
            {profile.role === "#Freelancer" ? "Freelancer" : "Recruiter"}
          </p>
        </div>
        
        <div className="mb-6">
          <h3 className="font-medium text-gray-800 mb-2">Skills</h3>
          <div className="flex flex-wrap gap-2">
            {profile.skills.map((skill, index) => (
              <span 
                key={index} 
                className={`text-xs px-2 py-1 rounded-full ${
                  profile.role === "#Freelancer" 
                    ? "bg-indigo-100 text-indigo-800" 
                    : "bg-purple-100 text-purple-800"
                }`}
              >
                {skill}
              </span>
            ))}
          </div>
        </div>
        
        <div>
          <h3 className="font-medium text-gray-800 mb-2">Bio</h3>
          <p className="text-gray-700">{profile.bio}</p>
        </div>
      </div>
    </div>
  );
};

export default ProfileView;





import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

const ProfileCreation = () => {
  const { backendActor, setUserProfile } = useAuth();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    role: '#Freelancer',
    skills: '',
    bio: ''
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    try {
      const skills = formData.skills.split(',').map(skill => skill.trim());


      const roleVariant = formData.role === '#Freelancer'
        ? { Freelancer: null }
        : { Recruiter: null };

      const result = await backendActor.createProfile(
        formData.name,
        formData.email,
        roleVariant, // Pass the variant as an object
        skills,
        formData.bio
      );

      // const result = await backendActor.createProfile(
      //   formData.name,
      //   formData.email,
      //   formData.role,
      //   skills,
      //   formData.bio
      // );

      if (result) {
        // Fetch the updated profile
        const profile = await backendActor.getProfile();
        setUserProfile(profile.length > 0 ? profile[0] : null);

        // Redirect to appropriate dashboard
        if (formData.role === '#Freelancer') {
          navigate('/freelancer-dashboard');
        } else {
          navigate('/recruiter-dashboard');
        }
      } else {
        setError('Failed to create profile. Please try again.');
      }
    } catch (error) {
      console.error('Error creating profile:', error);
      setError('Error creating profile: ' + error.message);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container mx-auto px-4 max-w-md">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-8">Create Your Profile</h1>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit} className="bg-white shadow-md rounded-lg p-6">
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="role">
              I am a:
            </label>
            <select
              id="role"
              name="role"
              value={formData.role}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            >
              <option value="#Freelancer">Freelancer</option>
              <option value="#Recruiter">Recruiter</option>
            </select>
          </div>

          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="name">
              Full Name
            </label>
            <input
              id="name"
              name="name"
              type="text"
              value={formData.name}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>

          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
              Email
            </label>
            <input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>

          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="skills">
              Skills (comma separated)
            </label>
            <input
              id="skills"
              name="skills"
              type="text"
              value={formData.skills}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              placeholder="e.g. React, Motoko, Web3, Design"
              required
            />
          </div>

          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="bio">
              Bio
            </label>
            <textarea
              id="bio"
              name="bio"
              value={formData.bio}
              onChange={handleChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              rows="4"
              required
            ></textarea>
          </div>

          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-colors disabled:opacity-50"
          >
            {isSubmitting ? 'Creating Profile...' : 'Create Profile'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default ProfileCreation;




// src/services/authService.js
import { AuthClient } from "@dfinity/auth-client";
import { Actor, HttpAgent } from "@dfinity/agent";
import { createActor as createBackendActor } from "../../../declarations/web3jobs_backend";

// One day in nanoseconds
const ONE_DAY_NS = BigInt(86400000000000);

// Get the correct Internet Identity URL based on environment
const getIdentityProviderUrl = () => {
  const network = process.env.DFX_NETWORK || "local";
  const canisterId = process.env.CANISTER_ID_INTERNET_IDENTITY;
  
  if (network === "ic") {
    return "https://identity.ic0.app";
  } else {
    return `http://${canisterId}.localhost:4943`;
  }
};

// Create an auth client instance
export const createAuthClient = async () => {
  return await AuthClient.create({
    idleOptions: {
      disableIdle: false,
      idleTimeout: 1000 * 60 * 30, // 30 minutes
    },
  });
};

// Login with Internet Identity
export const login = async (authClient, onSuccess) => {
  await authClient.login({
    identityProvider: getIdentityProviderUrl(),
    maxTimeToLive: ONE_DAY_NS,
    onSuccess: onSuccess,
    onError: (error) => {
      console.error("Login failed:", error);
    },
  });
};

// Logout
export const logout = async (authClient) => {
  await authClient.logout();
  window.location.href = "/";
};

// Create backend actor with identity
// Change the createBackendWithIdentity function to:
export const createBackendWithIdentity = async (authClient, canisterId) => {
  const identity = authClient.getIdentity();
  
  const agent = new HttpAgent({ 
    identity,
    host: process.env.DFX_NETWORK === 'ic' 
      ? 'https://icp0.io' 
      : 'http://localhost:4943'
  });

  if (process.env.DFX_NETWORK !== "ic") {
    try {
      await agent.fetchRootKey();
      console.log("Root key fetched successfully");
    } catch (error) {
      console.error("Failed to fetch root key:", error);
      throw new Error("Local replica unavailable. Start with: dfx start");
    }
  }
  
  return createBackendActor(canisterId, { agent });
};
// export const createBackendWithIdentity = async (authClient) => { // Make async
//   const identity = authClient.getIdentity();
  
//   // Configure agent properly
//   const agent = new HttpAgent({ 
//     identity,
//     host: process.env.DFX_NETWORK === 'ic' 
//       ? 'https://icp0.io' 
//       : 'http://localhost:4943'
//   });

//   // Handle root key properly
//   if (process.env.DFX_NETWORK !== "ic") {
//     try {
//       await agent.fetchRootKey(); // Add await
//       console.log("Root key fetched successfully");
//     } catch (error) {
//       console.error("Failed to fetch root key:", error);
//       throw new Error("Local replica unavailable. Start with: dfx start");
//     }
//   }
  
//   return createBackendActor(process.env.CANISTER_ID_WEB3JOBS_BACKEND, { agent });
// };

// export const createBackendWithIdentity = (authClient) => {
//   const identity = authClient.getIdentity();
//   const agent = new HttpAgent({ identity });
  
//   // When in development, we need to fetch the root key
//   if (process.env.DFX_NETWORK !== "ic") {
//     agent.fetchRootKey().catch(err => {
//       console.warn("Unable to fetch root key. Check your local replica is running");
//       console.error(err);
//     });
//   }
  
//   return createBackendActor(process.env.CANISTER_ID_WEB3JOBS_BACKEND, { agent });
// };

// export const createBackendWithIdentity = (authClient) => {
//   const identity = authClient.getIdentity();
//   const agent = new HttpAgent({
//     host: "https://icp-api.io",
//     identity
//   });
  
//   // Only for local development
//   if (process.env.NODE_ENV !== "production") {
//     agent.fetchRootKey().catch(err => {
//       console.warn("Unable to fetch root key. Check your connection and the canister ID.");
//     });
//   }
  
//   // return Actor.createActor(idlFactory, {
//   //   agent,
//   //   canisterId: canisterId
//   // });
//   return createBackendActor(process.env.CANISTER_ID_WEB3JOBS_BACKEND, { agent });
// };








import React, { createContext, useContext, useState, useEffect, useRef } from 'react';
import { createAuthClient, login, logout, createBackendWithIdentity } from '../services/authService';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [authClient, setAuthClient] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [identity, setIdentity] = useState(null);
  const [principal, setPrincipal] = useState(null);
  const [backendActor, setBackendActor] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  
  // Use a ref to track initialization
  const isInitialized = useRef(false);

  // Initialize auth client
  useEffect(() => {
    const init = async () => {
      if (isInitialized.current) return;
      isInitialized.current = true;
      
      try {
        console.log("Initializing auth client...");
        const client = await createAuthClient();
        setAuthClient(client);
        
        const isLoggedIn = await client.isAuthenticated();
        console.log("Is authenticated:", isLoggedIn);
        setIsAuthenticated(isLoggedIn);
        
        if (isLoggedIn) {
          const identity = client.getIdentity();
          setIdentity(identity);
          setPrincipal(identity.getPrincipal());
          
          try {
            console.log("Creating backend actor...");
            const actor = await createBackendWithIdentity(client);
            setBackendActor(actor);
            
            // Verify actor has getProfile method
            if (actor && typeof actor.getProfile === 'function') {
              console.log("Fetching user profile...");
              try {
                const profile = await actor.getProfile();
                console.log("Profile received:", profile);
                setUserProfile(profile || null);
              } catch (profileError) {
                console.error("Error fetching profile:", profileError);
              }
            } else {
              console.error("Actor missing getProfile method");
            }
          } catch (actorError) {
            console.error("Error creating actor:", actorError);
          }
        }
        
        setIsLoading(false);
      } catch (error) {
        console.error("Error initializing auth:", error);
        setIsLoading(false);
      }
    };
    
    init();
  }, []);
  
  // Login function
  const handleLogin = async () => {
    if (!authClient) {
      console.error("Auth client not initialized");
      return;
    }
    
    await login(authClient, async () => {
      console.log("Login successful");
      setIsAuthenticated(true);
      const identity = authClient.getIdentity();
      setIdentity(identity);
      setPrincipal(identity.getPrincipal());
      
      try {
        console.log("Creating backend actor after login...");
        const actor = await createBackendWithIdentity(authClient);
        setBackendActor(actor);
        
        // Verify actor has getProfile method
        if (actor && typeof actor.getProfile === 'function') {
          console.log("Fetching user profile after login...");
          try {
            const profile = await actor.getProfile();
            console.log("Profile received after login:", profile);
            setUserProfile(profile || null);
          } catch (profileError) {
            console.error("Error fetching profile after login:", profileError);
          }
        } else {
          console.error("Actor missing getProfile method after login");
          
          // Debug: Try calling whoami to verify authentication
          if (actor && typeof actor.whoami === 'function') {
            try {
              const principal = await actor.whoami();
              console.log("Whoami result:", principal.toString());
            } catch (whoamiError) {
              console.error("Error calling whoami:", whoamiError);
            }
          }
        }
      } catch (actorError) {
        console.error("Error creating actor after login:", actorError);
      }
    });
  };
  
  // Logout function
  const handleLogout = async () => {
    if (!authClient) return;
    
    await logout(authClient);
    setIsAuthenticated(false);
    setIdentity(null);
    setPrincipal(null);
    setBackendActor(null);
    setUserProfile(null);
  };
  
  // Profile refresh function
  const refreshProfile = async () => {
    if (!backendActor || typeof backendActor.getProfile !== 'function') {
      console.error("Cannot refresh profile: actor or getProfile method not available");
      return;
    }
    
    try {
      const profile = await backendActor.getProfile();
      setUserProfile(profile || null);
    } catch (error) {
      console.error("Error refreshing profile:", error);
    }
  };
  
  const value = {
    authClient,
    isAuthenticated,
    identity,
    principal,
    backendActor,
    userProfile,
    isLoading,
    login: handleLogin,
    logout: handleLogout,
    refreshProfile,
    setUserProfile
  };
  
  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};



import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import LoadingScreen from '../components/LoadingScreen';

const LandingPage = () => {
  const { isAuthenticated, isLoading, login, userProfile } = useAuth();
  const navigate = useNavigate();
  
  useEffect(() => {
    // If user is authenticated and has a profile, redirect to appropriate dashboard
    if (isAuthenticated && userProfile) {
      if (userProfile.role === "#Freelancer") {
        navigate('/freelancer-dashboard');
      } else if (userProfile.role === "#Recruiter") {
        navigate('/recruiter-dashboard');
      }
    } else if (isAuthenticated && !userProfile) {
      // If authenticated but no profile, redirect to profile creation
      navigate('/create-profile');
    }
  }, [isAuthenticated, userProfile, navigate]);
  
  if (isLoading) {
    return <LoadingScreen />;
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-500 to-purple-600">
      <div className="container mx-auto px-4 py-16">
        <header className="flex justify-between items-center mb-16">
          <div className="text-white text-3xl font-bold">AfroTalent</div>
          <button
            onClick={login}
            className="bg-white text-indigo-600 px-6 py-2 rounded-full font-medium hover:bg-opacity-90 transition-all"
          >
            Sign In with Internet Identity
          </button>
        </header>
        
        <main className="text-center text-white mt-24">
          <h1 className="text-5xl font-bold mb-6">Web3 Freelance Marketplace</h1>
          <p className="text-xl mb-12 max-w-2xl mx-auto">
            Connect with top Web3 talent and projects on a decentralized platform powered by Internet Computer.
          </p>
          <button
            onClick={login}
            className="bg-white text-indigo-600 px-8 py-3 rounded-full text-lg font-medium hover:bg-opacity-90 transition-all"
          >
            Get Started
          </button>
        </main>
        
        <section className="mt-32 grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="bg-white bg-opacity-10 p-6 rounded-xl backdrop-blur-sm">
            <h3 className="text-white text-xl font-semibold mb-3">For Freelancers</h3>
            <p className="text-white text-opacity-80">
              Showcase your skills, find Web3 projects, and get paid securely through blockchain technology.
            </p>
          </div>
          <div className="bg-white bg-opacity-10 p-6 rounded-xl backdrop-blur-sm">
            <h3 className="text-white text-xl font-semibold mb-3">For Recruiters</h3>
            <p className="text-white text-opacity-80">
              Post jobs, find specialized talent, and manage your projects with transparent workflows.
            </p>
          </div>
          <div className="bg-white bg-opacity-10 p-6 rounded-xl backdrop-blur-sm">
            <h3 className="text-white text-xl font-semibold mb-3">Secure & Decentralized</h3>
            <p className="text-white text-opacity-80">
              Built on Internet Computer Protocol for trustless transactions and secure identity verification.
            </p>
          </div>
        </section>
      </div>
    </div>
  );
};

export default LandingPage;





// src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import LandingPage from './pages/LandingPage';
import ProfileCreation from './pages/ProfileCreation';
import FreelancerDashboard from './pages/FreelancerDashboard';
import RecruiterDashboard from './pages/RecruiterDashboard';
import ProtectedRoute from './components/ProtectedRoute';
import LoadingScreen from './components/LoadingScreen';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/" element={<LandingPage />} />
          <Route path="/create-profile" element={
            <ProtectedRoute>
              <ProfileCreation />
            </ProtectedRoute>
          } />
          <Route path="/freelancer-dashboard/*" element={
            <ProtectedRoute requireProfile roleType="#Freelancer">
              <FreelancerDashboard />
            </ProtectedRoute>
          } />
          <Route path="/recruiter-dashboard/*" element={
            <ProtectedRoute requireProfile roleType="#Recruiter">
              <RecruiterDashboard />
            </ProtectedRoute>
          } />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;





import React, { useState, useEffect } from 'react';
import { Routes, Route, Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import JobListings from '../components/JobListings';
import MyApplications from '../components/MyApplications';
import ProfileView from '../components/ProfileView';
import ProfileForm from '../components/ProfileForm';

const FreelancerDashboard = () => {
  const { userProfile, logout, backendActor } = useAuth();
  const [jobListings, setJobListings] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  
  useEffect(() => {
    // Check if user has a complete profile
    const checkProfile = async () => {
      if (!userProfile) {
        navigate('/profile-setup');
        return;
      }
      
      if (!userProfile.isComplete) {
        navigate('/freelancer-dashboard/profile');
      }
    };
    
    checkProfile();
  }, [userProfile, navigate]);
  
  useEffect(() => {
    const fetchJobs = async () => {
      if (!backendActor) return;
      
      setIsLoading(true);
      setError('');
      
      try {
        // Call the getAllJobListings function from your backend
        const jobs = await backendActor.getAllJobListings();
        
        // Filter to only show open jobs
        const openJobs = jobs.filter(job => job.isOpen);
        setJobListings(openJobs);
      } catch (error) {
        console.error('Error fetching jobs:', error);
        setError('Failed to load job listings. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchJobs();
  }, [backendActor]);
  
  const handleRefreshJobs = () => {
    setIsLoading(true);
    backendActor.getAllJobListings()
      .then(jobs => {
        const openJobs = jobs.filter(job => job.isOpen);
        setJobListings(openJobs);
        setError('');
      })
      .catch(err => {
        console.error('Error refreshing jobs:', err);
        setError('Failed to refresh job listings.');
      })
      .finally(() => setIsLoading(false));
  };
  
  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-indigo-600 text-white shadow-md">
        <div className="container mx-auto px-4 py-3 flex justify-between items-center">
          <div className="text-xl font-bold">AfroTalent</div>
          <div className="flex items-center space-x-6">
            <Link to="/freelancer-dashboard" className="hover:text-indigo-200 transition-colors">
              Find Jobs
            </Link>
            <Link to="/freelancer-dashboard/applications" className="hover:text-indigo-200 transition-colors">
              My Applications
            </Link>
            <Link to="/freelancer-dashboard/profile" className="hover:text-indigo-200 transition-colors">
              My Profile
            </Link>
            <button 
              onClick={logout}
              className="bg-white text-indigo-600 px-4 py-1 rounded-full text-sm font-medium hover:bg-opacity-90 transition-colors"
            >
              Sign Out
            </button>
          </div>
        </div>
      </nav>
      
      <div className="container mx-auto px-4 py-8">
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
            <button 
              onClick={handleRefreshJobs}
              className="ml-4 underline text-red-700 hover:text-red-800"
            >
              Try Again
            </button>
          </div>
        )}
        
        <Routes>
          <Route path="/" element={
            <JobListings 
              jobs={jobListings} 
              isLoading={isLoading} 
              backendActor={backendActor} 
            />
          } />
          <Route path="/applications" element={<MyApplications backendActor={backendActor} />} />
          <Route path="/profile" element={
            userProfile && !userProfile.isComplete ? (
              <ProfileForm 
                backendActor={backendActor} 
                initialData={userProfile} 
                userRole="#Freelancer" 
              />
            ) : (
              <ProfileView 
                profile={userProfile} 
                backendActor={backendActor} 
                onEdit={() => navigate('/freelancer-dashboard/edit-profile')} 
              />
            )
          } />
          <Route path="/edit-profile" element={
            <ProfileForm 
              backendActor={backendActor} 
              initialData={userProfile} 
              userRole="#Freelancer" 
              isEditing={true} 
            />
          } />
        </Routes>
      </div>
    </div>
  );
};

export default FreelancerDashboard;




// src/pages/RecruiterDashboard.jsx
import React, { useState, useEffect } from 'react';
import { Routes, Route, Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import MyJobListings from '../components/MyJobListings';
import CreateJobListing from '../components/CreateJobListing';
import ProfileView from '../components/ProfileView';
import ProfileForm from '../components/ProfileForm';

const RecruiterDashboard = () => {
  const { userProfile, logout, backendActor } = useAuth();
  const [myJobs, setMyJobs] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  
  useEffect(() => {
    // Check if user has a complete profile
    const checkProfile = async () => {
      if (!userProfile) {
        navigate('/profile-setup');
        return;
      }
      
      if (!userProfile.isComplete) {
        navigate('/recruiter-dashboard/profile');
      }
    };
    
    checkProfile();
  }, [userProfile, navigate]);
  
  useEffect(() => {
    const fetchMyJobs = async () => {
      if (!backendActor || !userProfile) return;
      
      setIsLoading(true);
      setError('');
      
      try {
        const jobs = await backendActor.getAllJobListings();
        
        // Filter jobs created by this recruiter
        const filteredJobs = jobs.filter(job => 
          job.recruiterPrincipal.toString() === userProfile.principal.toString()
        );
        
        // Sort jobs by creation date (newest first)
        filteredJobs.sort((a, b) => Number(b.createdAt) - Number(a.createdAt));
        
        setMyJobs(filteredJobs);
      } catch (error) {
        console.error('Error fetching jobs:', error);
        setError('Failed to load your job listings. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchMyJobs();
  }, [backendActor, userProfile]);
  
  const handleRefreshJobs = () => {
    if (!backendActor || !userProfile) return;
    
    setIsLoading(true);
    backendActor.getAllJobListings()
      .then(jobs => {
        const filteredJobs = jobs.filter(job => 
          job.recruiterPrincipal.toString() === userProfile.principal.toString()
        );
        filteredJobs.sort((a, b) => Number(b.createdAt) - Number(a.createdAt));
        setMyJobs(filteredJobs);
        setError('');
      })
      .catch(err => {
        console.error('Error refreshing jobs:', err);
        setError('Failed to refresh job listings.');
      })
      .finally(() => setIsLoading(false));
  };
  
  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-purple-600 text-white shadow-md">
        <div className="container mx-auto px-4 py-3 flex justify-between items-center">
          <div className="text-xl font-bold">AfroTalent</div>
          <div className="flex items-center space-x-6">
            <Link to="/recruiter-dashboard" className="hover:text-purple-200 transition-colors">
              My Job Listings
            </Link>
            <Link to="/recruiter-dashboard/create-job" className="hover:text-purple-200 transition-colors">
              Post a Job
            </Link>
            <Link to="/recruiter-dashboard/profile" className="hover:text-purple-200 transition-colors">
              My Profile
            </Link>
            <button 
              onClick={logout}
              className="bg-white text-purple-600 px-4 py-1 rounded-full text-sm font-medium hover:bg-opacity-90 transition-colors"
            >
              Sign Out
            </button>
          </div>
        </div>
      </nav>
      
      <div className="container mx-auto px-4 py-8">
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
            <button 
              onClick={handleRefreshJobs}
              className="ml-4 underline text-red-700 hover:text-red-800"
            >
              Try Again
            </button>
          </div>
        )}
        
        <Routes>
          <Route path="/" element={
            <MyJobListings 
              jobs={myJobs} 
              isLoading={isLoading} 
              backendActor={backendActor} 
              onRefresh={handleRefreshJobs}
            />
          } />
          <Route path="/create-job" element={
            <CreateJobListing 
              backendActor={backendActor} 
              onSuccess={handleRefreshJobs}
            />
          } />
          <Route path="/profile" element={
            userProfile && !userProfile.isComplete ? (
              <ProfileForm 
                backendActor={backendActor} 
                initialData={userProfile} 
                userRole="#Recruiter" 
              />
            ) : (
              <ProfileView 
                profile={userProfile} 
                backendActor={backendActor} 
                onEdit={() => navigate('/recruiter-dashboard/edit-profile')} 
              />
            )
          } />
          <Route path="/edit-profile" element={
            <ProfileForm 
              backendActor={backendActor} 
              initialData={userProfile} 
              userRole="Recruiter" 
              isEditing={true} 
            />
          } />
        </Routes>
      </div>
    </div>
  );
};

export default RecruiterDashboard;




import React from 'react';

const ProfileView = ({ profile }) => {
  if (!profile) return null;

  return (
    <div className="bg-white rounded-xl shadow-md p-6">
      <div className="flex items-start gap-6 mb-6">
        <img 
          src={profile.image} 
          className="w-24 h-24 rounded-full object-cover border-2 border-indigo-100"
          alt="Profile"
        />
        <div>
          <h2 className="text-2xl font-bold">{profile.name}</h2>
          <p className="text-indigo-600">{profile.email}</p>
          <span className="inline-block mt-2 px-3 py-1 bg-indigo-100 text-indigo-800 rounded-full text-sm">
            {profile.role.Freelancer ? 'Freelancer' : 'Recruiter'}
          </span>
        </div>
      </div>

      {profile.role.Freelancer ? (
        <div className="space-y-4">
          <div>
            <h3 className="font-semibold mb-2">Skills</h3>
            <div className="flex flex-wrap gap-2">
              {profile.skills.map((skill, index) => (
                <span 
                  key={index}
                  className="px-3 py-1 bg-indigo-100 text-indigo-800 rounded-full text-sm"
                >
                  {skill}
                </span>
              ))}
            </div>
          </div>
          
          <div>
            <h3 className="font-semibold">Hourly Rate</h3>
            <p>{profile.hourlyRate} ICP/hour</p>
          </div>
          
          <div>
            <h3 className="font-semibold">Portfolio</h3>
            <a 
              href={profile.portfolioLink} 
              className="text-indigo-600 hover:underline"
              target="_blank" 
              rel="noopener noreferrer"
            >
              {profile.portfolioLink}
            </a>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          <div>
            <h3 className="font-semibold">Company</h3>
            <p>{profile.companyName}</p>
          </div>
          
          <div>
            <h3 className="font-semibold">Website</h3>
            <a 
              href={profile.companyWebsite} 
              className="text-indigo-600 hover:underline"
              target="_blank" 
              rel="noopener noreferrer"
            >
              {profile.companyWebsite}
            </a>
          </div>
          
          <div>
            <h3 className="font-semibold">Hiring Budget</h3>
            <p>{profile.hiringBudget} ICP/month</p>
          </div>
        </div>
      )}

      <div className="mt-6 pt-4 border-t border-gray-200">
        <h3 className="font-semibold mb-2">About Me</h3>
        <p className="text-gray-600 whitespace-pre-line">{profile.bio}</p>
      </div>
    </div>
  );
};

export default ProfileView;




// src/components/CreateJobListing.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useUpdateCall } from '@ic-reactor/react';

const CreateJobListing = ({ backendActor }) => {
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    skills: '',
    budget: 0
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'budget' ? Number(value) : value
    }));
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    
    try {
      const skills = formData.skills.split(',').map(skill => skill.trim());
      
      // Updated to match backend function signature and return type
      const result = await backendActor.createJobListing(
        formData.title,
        formData.description,
        skills,
        Number(formData.budget)
      );
      
      // Backend returns an optional Nat (jobId), so we check if it exists
      if (result && result.length > 0) {
        navigate('/recruiter-dashboard');
      } else {
        setError('Failed to create job listing. Please ensure your profile is complete and you have recruiter role.');
      }
    } catch (error) {
      console.error('Error creating job listing:', error);
      setError('Error creating job listing: ' + error.message);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div>
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Post a New Job</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="bg-white shadow-md rounded-lg p-6">
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="title">
            Job Title
          </label>
          <input
            id="title"
            name="title"
            type="text"
            value={formData.title}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            required
          />
        </div>
        
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="description">
            Job Description
          </label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            rows="6"
            required
          ></textarea>
        </div>
        
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="skills">
            Required Skills (comma separated)
          </label>
          <input
            id="skills"
            name="skills"
            type="text"
            value={formData.skills}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="e.g. React, Motoko, Web3, Design"
            required
          />
        </div>
        
        <div className="mb-6">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="budget">
            Budget (ICP)
          </label>
          <input
            id="budget"
            name="budget"
            type="number"
            min="0"
            step="1"
            value={formData.budget}
            onChange={handleChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            required
          />
        </div>
        
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={() => navigate('/recruiter-dashboard')}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={isSubmitting}
            className="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50"
          >
            {isSubmitting ? 'Creating Job...' : 'Post Job'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateJobListing;



import React, { useState, useEffect } from 'react';

const JobListings = ({ jobs, isLoading, backendActor }) => {
  const [selectedJob, setSelectedJob] = useState(null);
  const [proposal, setProposal] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [userProfile, setUserProfile] = useState(null);
  const [profileLoading, setProfileLoading] = useState(true);
  
  // Fetch user profile to check if they're a freelancer and have a complete profile
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        if (backendActor) {
          const profile = await backendActor.getProfile();
          setUserProfile(profile.length > 0 ? profile[0] : null);
        }
      } catch (err) {
        console.error("Error fetching profile:", err);
      } finally {
        setProfileLoading(false);
      }
    };
    
    fetchProfile();
  }, [backendActor]);
  
  const handleApply = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    setSuccess('');
    
    try {
      // Check if user has a complete profile and is a freelancer
      if (!userProfile) {
        setError('You need to create a profile before applying for jobs.');
        setIsSubmitting(false);
        return;
      }
      
      if (!userProfile.isComplete) {
        setError('Please complete your profile before applying for jobs.');
        setIsSubmitting(false);
        return;
      }
      
      if (userProfile.role !== 'Freelancer') {
        setError('Only freelancers can apply for jobs.');
        setIsSubmitting(false);
        return;
      }
      
      // Call the backend function with the job ID and proposal
      const result = await backendActor.applyForJob(selectedJob.id, proposal);
      
      if (result) {
        setSuccess('Your application has been submitted successfully!');
        setProposal('');
        setSelectedJob(null);
      } else {
        setError('Failed to submit application. You may have already applied for this job or the job is no longer open.');
      }
    } catch (error) {
      console.error('Error applying for job:', error);
      setError('Error applying for job: ' + error.message);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  if (isLoading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mx-auto"></div>
        <p className="mt-4 text-gray-600">Loading job listings...</p>
      </div>
    );
  }
  
  return (
    <div>
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Available Jobs</h1>
      
      {success && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
          {success}
        </div>
      )}
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {jobs.length === 0 ? (
        <div className="text-center py-8 bg-white rounded-lg shadow-sm">
          <p className="text-gray-600">No job listings available at the moment.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {jobs.map(job => (
            <div key={job.id} className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-2">{job.title}</h2>
              <p className="text-gray-600 mb-4">{job.description}</p>
              
              <div className="flex flex-wrap gap-2 mb-4">
                {job.skills.map((skill, index) => (
                  <span key={index} className="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full">
                    {skill}
                  </span>
                ))}
              </div>
              
              <div className="flex justify-between items-center">
                <div className="text-gray-700">
                  <span className="font-medium">Budget:</span> {job.budget} ICP
                </div>
                
                {job.isOpen ? (
                  <button
                    onClick={() => setSelectedJob(job)}
                    className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors"
                    disabled={profileLoading}
                  >
                    Apply Now
                  </button>
                ) : (
                  <span className="text-red-600 font-medium">Closed</span>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      
      {/* Application Modal */}
      {selectedJob && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Apply for: {selectedJob.title}</h2>
            
            <form onSubmit={handleApply}>
              <div className="mb-4">
                <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="proposal">
                  Your Proposal
                </label>
                <textarea
                  id="proposal"
                  value={proposal}
                  onChange={(e) => setProposal(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  rows="6"
                  placeholder="Describe why you're a good fit for this job..."
                  required
                ></textarea>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setSelectedJob(null)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors disabled:opacity-50"
                >
                  {isSubmitting ? 'Submitting...' : 'Submit Application'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default JobListings;


// src/components/MyApplications.jsx
import React, { useState, useEffect } from 'react';

const MyApplications = ({ backendActor }) => {
  const [applications, setApplications] = useState([]);
  const [jobDetails, setJobDetails] = useState({});
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  
  useEffect(() => {
    const fetchApplications = async () => {
      try {
        // Get applications from the backend
        const apps = await backendActor.getMyApplications();
        setApplications(apps);
        
        if (apps.length > 0) {
          // Fetch job details for each application
          const jobPromises = apps.map(app => backendActor.getJobListing(app.jobId));
          const jobResults = await Promise.all(jobPromises);
          
          const jobMap = {};
          jobResults.forEach((jobResult, index) => {
            // Check if job exists (it's an optional type in your backend)
            if (jobResult && jobResult.length > 0) {
              jobMap[apps[index].jobId] = jobResult[0];
            }
          });
          
          setJobDetails(jobMap);
        }
      } catch (error) {
        console.error('Error fetching applications:', error);
        setError('Failed to load your applications. Please try again later.');
      } finally {
        setIsLoading(false);
      }
    };
    
    if (backendActor) {
      fetchApplications();
    }
  }, [backendActor]);
  
  if (isLoading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500 mx-auto"></div>
        <p className="mt-4 text-gray-600">Loading your applications...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        {error}
      </div>
    );
  }
  
  return (
    <div>
      <h1 className="text-2xl font-bold text-gray-800 mb-6">My Applications</h1>
      
      {applications.length === 0 ? (
        <div className="text-center py-8 bg-white rounded-lg shadow-sm">
          <p className="text-gray-600">You haven't applied to any jobs yet.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {applications.map((app, index) => {
            const job = jobDetails[app.jobId];
            return (
              <div key={index} className="bg-white rounded-lg shadow-sm p-6">
                <h2 className="text-xl font-semibold text-gray-800 mb-2">
                  {job ? job.title : `Job #${app.jobId}`}
                </h2>
                
                {job && (
                  <>
                    <p className="text-gray-600 mb-4">{job.description}</p>
                    <div className="flex flex-wrap gap-2 mb-4">
                      {job.skills.map((skill, idx) => (
                        <span key={idx} className="bg-indigo-100 text-indigo-800 text-xs px-2 py-1 rounded-full">
                          {skill}
                        </span>
                      ))}
                    </div>
                    <div className="text-gray-700 mb-4">
                      <span className="font-medium">Budget:</span> {job.budget} ICP
                    </div>
                    <div className="text-gray-700 mb-4">
                      <span className="font-medium">Status:</span> {job.isOpen ? 'Open' : 'Closed'}
                    </div>
                  </>
                )}
                
                <div className="border-t border-gray-200 pt-4 mt-4">
                  <h3 className="font-medium text-gray-800 mb-2">Your Proposal:</h3>
                  <p className="text-gray-600">{app.proposal}</p>
                </div>
                
                <div className="text-sm text-gray-500 mt-4">
                  Applied on: {new Date(Number(app.createdAt) / 1000000).toLocaleDateString()}
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default MyApplications;



// src/components/MyJobListings.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

const MyJobListings = ({ jobs, isLoading, backendActor }) => {
  const [selectedJob, setSelectedJob] = useState(null);
  const [applications, setApplications] = useState([]);
  const [isLoadingApps, setIsLoadingApps] = useState(false);
  const [error, setError] = useState('');
  const [applicantProfiles, setApplicantProfiles] = useState({});
  
  // Fetch job applications when a job is selected
  const viewApplications = async (jobId) => {
    setIsLoadingApps(true);
    setError('');
    try {
      // Call the backend function to get applications for this job
      const apps = await backendActor.getApplicationsForJob(jobId);
      setApplications(apps);
      setSelectedJob(jobs.find(job => job.id === jobId));
      
      // If there are applications, fetch the profiles of the applicants
      if (apps.length > 0) {
        // This would require a new backend function to get profiles by principal
        // For now, we'll just display the applications without profile details
      }
    } catch (error) {
      console.error('Error fetching applications:', error);
      setError('Failed to load applications. Please try again later.');
    } finally {
      setIsLoadingApps(false);
    }
  };
  
  if (isLoading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500 mx-auto"></div>
        <p className="mt-4 text-gray-600">Loading your job listings...</p>
      </div>
    );
  }
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">My Job Listings</h1>
        <Link 
          to="/recruiter-dashboard/create-job"
          className="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors"
        >
          Post New Job
        </Link>
      </div>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      {jobs.length === 0 ? (
        <div className="text-center py-8 bg-white rounded-lg shadow-sm">
          <p className="text-gray-600">You haven't posted any jobs yet.</p>
          <Link 
            to="/recruiter-dashboard/create-job"
            className="inline-block mt-4 bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors"
          >
            Post Your First Job
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 gap-6">
          {jobs.map(job => (
            <div key={job.id} className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-2">{job.title}</h2>
              <p className="text-gray-600 mb-4">{job.description}</p>
              
              <div className="flex flex-wrap gap-2 mb-4">
                {job.skills.map((skill, index) => (
                  <span key={index} className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full">
                    {skill}
                  </span>
                ))}
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <div className="text-gray-700 mb-2">
                    <span className="font-medium">Budget:</span> {job.budget} ICP
                  </div>
                  <div className="text-gray-700">
                    <span className="font-medium">Status:</span> {job.isOpen ? 
                      <span className="text-green-600">Open</span> : 
                      <span className="text-red-600">Closed</span>
                    }
                  </div>
                </div>
                
                <div className="flex space-x-2">
                  {job.isOpen && (
                    <button
                      onClick={() => {
                        // Here you would add logic to close the job
                        // This would require a new backend function
                      }}
                      className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors"
                    >
                      Close Job
                    </button>
                  )}
                  <button
                    onClick={() => viewApplications(job.id)}
                    className="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors"
                  >
                    View Applications
                  </button>
                </div>
              </div>
              
              <div className="text-sm text-gray-500 mt-4">
                Posted on: {new Date(Number(job.createdAt) / 1000000).toLocaleDateString()}
              </div>
            </div>
          ))}
        </div>
      )}
      
      {/* Applications Modal */}
      {selectedJob && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-3xl max-h-[80vh] overflow-y-auto">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              Applications for: {selectedJob.title}
            </h2>
            
            {isLoadingApps ? (
              <div className="text-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500 mx-auto"></div>
                <p className="mt-4 text-gray-600">Loading applications...</p>
              </div>
            ) : applications.length === 0 ? (
              <div className="text-center py-8">
                <p className="text-gray-600">No applications received yet.</p>
              </div>
            ) : (
              <div className="space-y-6">
                {applications.map((app, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <h3 className="font-medium text-gray-800 mb-2">
                      Freelancer: {app.freelancerPrincipal.toString().substring(0, 10)}...
                    </h3>
                    <div className="bg-gray-50 p-3 rounded mb-4">
                      <h4 className="font-medium text-gray-700 mb-2">Proposal:</h4>
                      <p className="text-gray-600">{app.proposal}</p>
                    </div>
                    <div className="text-sm text-gray-500">
                      Received on: {new Date(Number(app.createdAt) / 1000000).toLocaleDateString()}
                    </div>
                    <div className="mt-4 flex justify-end space-x-2">
                      <button
                        className="bg-green-600 text-white px-3 py-1 rounded-md hover:bg-green-700 transition-colors text-sm"
                        onClick={() => {
                          // Here you would add logic to accept the application
                          // This would require a new backend function
                        }}
                      >
                        Accept
                      </button>
                      <button
                        className="bg-red-600 text-white px-3 py-1 rounded-md hover:bg-red-700 transition-colors text-sm"
                        onClick={() => {
                          // Here you would add logic to reject the application
                          // This would require a new backend function
                        }}
                      >
                        Reject
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
            
            <div className="flex justify-end mt-6">
              <button
                onClick={() => setSelectedJob(null)}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MyJobListings;